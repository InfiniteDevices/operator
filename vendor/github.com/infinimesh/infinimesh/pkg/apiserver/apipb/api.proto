//--------------------------------------------------------------------------
// Copyright 2018 Infinite Devices GmbH
// www.infinimesh.io
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//--------------------------------------------------------------------------

syntax = "proto3";

package infinimesh.api;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host : "api.infinimesh.io"
  info : {
    title : "Infinimesh IoT Platform"
    description : "Cloud Native IoT Platform"
    version : "0.0.9"
    contact : {
      name : "Infinimesh"
      url : "https://infinitedevices.io"
      email : "engineering@infinitedevices.io"
    }
  }
  schemes : HTTPS
  consumes : "application/json"
  produces : "application/json"
};
option go_package = "apipb";
option java_multiple_files = true;
option java_outer_classname = "ApiProto";
option java_package = "com.infinimesh.api";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "pkg/node/nodepb/node.proto";
import "pkg/registry/registrypb/device_registry.proto";
import "pkg/shadow/shadowpb/shadow.proto";
import "protoc-gen-swagger/options/annotations.proto";

message TokenRequest {
  string username    = 1;
  string password    = 2;
  string expire_time = 3; // token expire time in seconds
  repeated RestrictionRule ruleset = 4; // methods restrictions ruleset
}

message RestrictionRule {
  string type = 1;
  repeated string ids = 2;
}

message TokenResponse { string token = 1; }

message ListDevicesRequest { string namespace = 1; }

service Devices {
  rpc Create(infinimesh.deviceregistry.CreateRequest)
      returns (infinimesh.deviceregistry.CreateResponse) {
    option (google.api.http) = {
      post : "/devices"
      body : "*"
    };
  }
  rpc Update(infinimesh.deviceregistry.UpdateRequest)
      returns (infinimesh.deviceregistry.UpdateResponse) {
    option (google.api.http) = {
      patch : "/devices/{device.id}"
      body : "device"
    };
  }
  rpc Get(infinimesh.deviceregistry.GetRequest)
      returns (infinimesh.deviceregistry.GetResponse) {
    option (google.api.http) = {
      get : "/devices/{id}"
    };
  }
  rpc List(ListDevicesRequest)
      returns (infinimesh.deviceregistry.ListResponse) {
    option (google.api.http) = {
      get : "/devices"
    };
  }
  rpc Delete(infinimesh.deviceregistry.DeleteRequest)
      returns (infinimesh.deviceregistry.DeleteResponse) {
    option (google.api.http) = {
      delete : "/devices/{id}"
    };
  }
}

service States {
  rpc Get(infinimesh.shadow.GetRequest)
      returns (infinimesh.shadow.GetResponse) {
    option (google.api.http) = {
      get : "/devices/{id}/state"
    };
  }
  rpc PatchDesiredState(infinimesh.shadow.PatchDesiredStateRequest)
      returns (infinimesh.shadow.PatchDesiredStateResponse) {
    option (google.api.http) = {
      patch : "/devices/{id}/state"
      body : "data"
    };
  }
  rpc StreamReportedStateChanges(
      infinimesh.shadow.StreamReportedStateChangesRequest)
      returns (stream infinimesh.shadow.StreamReportedStateChangesResponse) {
    option (google.api.http) = {
      get : "/devices/{id}/state/stream"
    };
  }
}

service Accounts {
  rpc SelfAccount(google.protobuf.Empty) returns (infinimesh.node.Account) {
    option (google.api.http) = {
      get : "/account"
    };
  };

  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post : "/account/token"
      body : "*"
    };
  };

  rpc CreateUserAccount(infinimesh.node.CreateUserAccountRequest)
      returns (infinimesh.node.CreateUserAccountResponse) {
    option (google.api.http) = {
      post : "/accounts"
      body : "*";
  };
};

rpc GetAccount(infinimesh.node.GetAccountRequest)
    returns (infinimesh.node.Account) {
  option (google.api.http) = {
    get : "/accounts/{id}"
  };
};

rpc UpdateAccount(infinimesh.node.UpdateAccountRequest)
    returns (infinimesh.node.UpdateAccountResponse) {
  option (google.api.http) = {
    patch : "/accounts/{account.uid}"
    body : "account"
  };
};

rpc ListAccounts(infinimesh.node.ListAccountsRequest)
    returns (infinimesh.node.ListAccountsResponse) {
  option (google.api.http) = {
    get : "/accounts"
  };
};

rpc DeleteAccount(infinimesh.node.DeleteAccountRequest)
    returns (infinimesh.node.DeleteAccountResponse) {
  option (google.api.http) = {
    delete : "/accounts/{uid}"
  };
};
}

message ListObjectsRequest {
  string namespace = 1;
  bool recurse = 2;
}

message CreateObjectRequest {
  google.protobuf.StringValue parent = 1;
  string namespace = 2;
  infinimesh.node.Object object = 3;
}

// Object
service Objects {
  rpc ListObjects(ListObjectsRequest)
      returns (infinimesh.node.ListObjectsResponse) {
    option (google.api.http) = {
      get : "/objects"
    };
  }
  rpc CreateObject(infinimesh.api.CreateObjectRequest)
      returns (infinimesh.node.Object) {
    option (google.api.http) = {
      post : "/objects"
      body : "*"
    };
  }
  rpc DeleteObject(infinimesh.node.DeleteObjectRequest)
      returns (infinimesh.node.DeleteObjectResponse) {
    option (google.api.http) = {
      delete : "/objects/{uid}"
    };
  }
}

service Namespaces {
  rpc CreateNamespace(infinimesh.node.CreateNamespaceRequest)
      returns (infinimesh.node.Namespace) {
    option (google.api.http) = {
      post : "/namespaces"
      body : "*"
    };
  };

  rpc GetNamespace(infinimesh.node.GetNamespaceRequest)
      returns (infinimesh.node.Namespace) {
    option (google.api.http) = {
      get : "/namespaces/{namespace}"
    };
  };
  rpc ListNamespaces(infinimesh.node.ListNamespacesRequest)
      returns (infinimesh.node.ListNamespacesResponse) {
    option (google.api.http) = {
      get : "/namespaces"
    };
  };
  rpc CreatePermission(CreateNamespacePermissionRequest)
      returns (CreateNamespacePermissionResponse) {
    option (google.api.http) = {
      put : "/namespaces/{namespace}/permissions/{account_id}"
      body : "permission"
    };
  };
  rpc ListPermissions(infinimesh.node.ListPermissionsRequest)
      returns (infinimesh.node.ListPermissionsResponse) {
    option (google.api.http) = {
      get : "/namespaces/{namespace}/permissions"
    };
  };
  rpc DeletePermission(infinimesh.node.DeletePermissionRequest)
      returns (infinimesh.node.DeletePermissionResponse) {
    option (google.api.http) = {
      delete : "/namespaces/{namespace}/permissions/{account_id}"
    };
  };
}

message CreateNamespacePermissionRequest {
  string account_id = 1;
  string namespace = 2;
  Permission permission = 3;
}

// Permission.Action may either be NONE, READ or WRITE.
message Permission { infinimesh.node.Action action = 3; }

message CreateNamespacePermissionResponse {}