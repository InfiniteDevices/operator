components:
  schemas:
    apiTokenRequest:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    apiTokenResponse:
      properties:
        token:
          type: string
      type: object
    deviceregistryCertificate:
      properties:
        algorithm:
          type: string
        fingerprint:
          format: byte
          type: string
        fingerprintAlgorithm:
          type: string
        pem_data:
          type: string
      type: object
    deviceregistryCreateRequest:
      properties:
        device:
          $ref: '#/components/schemas/deviceregistryDevice'
        namespace:
          type: string
      type: object
    deviceregistryCreateResponse:
      properties:
        device:
          $ref: '#/components/schemas/deviceregistryDevice'
      type: object
    deviceregistryDeleteResponse:
      type: object
    deviceregistryDevice:
      properties:
        certificate:
          $ref: '#/components/schemas/deviceregistryCertificate'
        enabled:
          format: boolean
          type: boolean
        id:
          type: string
        name:
          type: string
        namespace:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    deviceregistryListResponse:
      properties:
        devices:
          items:
            $ref: '#/components/schemas/deviceregistryDevice'
          type: array
      type: object
    deviceregistryUpdateResponse:
      type: object
    infinimeshapiCreateObjectRequest:
      properties:
        namespace:
          type: string
        object:
          $ref: '#/components/schemas/nodeObject'
        parent:
          type: string
      type: object
    infinimeshdeviceregistryGetResponse:
      properties:
        device:
          $ref: '#/components/schemas/deviceregistryDevice'
      type: object
    infinimeshshadowGetResponse:
      properties:
        shadow:
          $ref: '#/components/schemas/shadowShadow'
      type: object
    nodeAccount:
      properties:
        default_namespace:
          $ref: '#/components/schemas/nodeNamespace'
        enabled:
          format: boolean
          type: boolean
        is_root:
          format: boolean
          type: boolean
        name:
          type: string
        uid:
          type: string
      type: object
    nodeCreateNamespaceRequest:
      properties:
        name:
          type: string
      type: object
    nodeCreateUserAccountRequest:
      properties:
        account:
          $ref: '#/components/schemas/nodeAccount'
        password:
          type: string
      type: object
    nodeCreateUserAccountResponse:
      properties:
        uid:
          type: string
      type: object
    nodeDeleteObjectResponse:
      type: object
    nodeListAccountsResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/nodeAccount'
          type: array
      type: object
    nodeListNamespacesResponse:
      properties:
        namespaces:
          items:
            $ref: '#/components/schemas/nodeNamespace'
          type: array
      type: object
    nodeListObjectsResponse:
      properties:
        objects:
          items:
            $ref: '#/components/schemas/nodeObject'
          type: array
      type: object
    nodeNamespace:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    nodeObject:
      properties:
        kind:
          type: string
        name:
          type: string
        objects:
          items:
            $ref: '#/components/schemas/nodeObject'
          type: array
        uid:
          type: string
      type: object
    protobufAny:
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := ptypes.MarshalAny(foo)
             ...
             foo := &pb.Foo{}
             if err := ptypes.UnmarshalAny(any, foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON

        ====

        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      properties:
        type_url:
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. The last segment of the URL's path must
            represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
          type: string
        value:
          description: >-
            Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
          type: string
      type: object
    protobufFieldMask:
      description: >-
        paths: "f.a"
            paths: "f.b.d"

        Here `f` represents a field in some root message, `a` and `b`

        fields in the message found in `f`, and `d` a field found in the

        message in `f.b`.


        Field masks are used to specify a subset of fields that should be

        returned by a get operation or modified by an update operation.

        Field masks also have a custom JSON encoding (see below).


        # Field Masks in Projections


        When used in the context of a projection, a response message or

        sub-message is filtered by the API to only contain those fields as

        specified in the mask. For example, if the mask in the previous

        example is applied to a response message as follows:

            f {
              a : 22
              b {
                d : 1
                x : 2
              }
              y : 13
            }
            z: 8

        The result will not contain specific values for fields x,y and z

        (their value will be set to the default, and omitted in proto text

        output):


            f {
              a : 22
              b {
                d : 1
              }
            }

        A repeated field is not allowed except at the last position of a

        paths string.


        If a FieldMask object is not present in a get operation, the

        operation applies to all fields (as if a FieldMask of all fields

        had been specified).


        Note that a field mask does not necessarily apply to the

        top-level response message. In case of a REST get operation, the

        field mask applies directly to the response, but in case of a REST

        list operation, the mask instead applies to each individual message

        in the returned resource list. In case of a REST custom method,

        other definitions may be used. Where the mask applies will be

        clearly documented together with its declaration in the API.  In

        any case, the effect on the returned resource/resources is required

        behavior for APIs.


        # Field Masks in Update Operations


        A field mask in update operations specifies which fields of the

        targeted resource are going to be updated. The API is required

        to only change the values of the fields as specified in the mask

        and leave the others untouched. If a resource is passed in to

        describe the updated values, the API ignores the values of all

        fields not covered by the mask.


        If a repeated field is specified for an update operation, the existing

        repeated values in the target resource will be overwritten by the new
        values.

        Note that a repeated field is only allowed in the last position of a
        `paths`

        string.


        If a sub-message is specified in the last position of the field mask for
        an

        update operation, then the existing sub-message in the target resource
        is

        overwritten. Given the target message:

            f {
              b {
                d : 1
                x : 2
              }
              c : 1
            }

        And an update message:

            f {
              b {
                d : 10
              }
            }

        then if the field mask is:

         paths: "f.b"

        then the result will be:

            f {
              b {
                d : 10
              }
              c : 1
            }

        However, if the update mask was:

         paths: "f.b.d"

        then the result would be:

            f {
              b {
                d : 10
                x : 2
              }
              c : 1
            }

        In order to reset a field's value to the default, the field must

        be in the mask and set to the default value in the provided resource.

        Hence, in order to reset all fields of a resource, provide a default

        instance of the resource and set all fields in the mask, or do

        not provide a mask as described below.


        If a field mask is not present on update, the operation applies to

        all fields (as if a field mask of all fields has been specified).

        Note that in the presence of schema evolution, this may mean that

        fields the client does not know and has therefore not filled into

        the request will be reset to their default. If this is unwanted

        behavior, a specific service may require a client to always specify

        a field mask, producing an error if not.


        As with get operations, the location of the resource which

        describes the updated values in the request message depends on the

        operation kind. In any case, the effect of the field mask is

        required to be honored by the API.


        ## Considerations for HTTP REST


        The HTTP kind of an update operation which uses a field mask must

        be set to PATCH instead of PUT in order to satisfy HTTP semantics

        (PUT must only be used for full updates).


        # JSON Encoding of Field Masks


        In JSON, a field mask is encoded as a single string where paths are

        separated by a comma. Fields name in each path are converted

        to/from lower-camel naming conventions.


        As an example, consider the following message declarations:

            message Profile {
              User user = 1;
              Photo photo = 2;
            }
            message User {
              string display_name = 1;
              string address = 2;
            }

        In proto a field mask for `Profile` may look as such:

            mask {
              paths: "user.display_name"
              paths: "photo"
            }

        In JSON, the same mask is represented as below:

            {
              mask: "user.displayName,photo"
            }

        # Field Masks and Oneof Fields


        Field masks treat fields in oneofs just as regular fields. Consider the

        following message:

            message SampleMessage {
              oneof test_oneof {
                string name = 4;
                SubMessage sub_message = 9;
              }
            }

        The field mask can be:

            mask {
              paths: "name"
            }

        Or:

            mask {
              paths: "sub_message"
            }

        Note that oneof type names ("test_oneof" in this case) cannot be used in

        paths.


        ## Field Mask Verification


        The implementation of any API method which has a FieldMask type field in
        the

        request should verify the included field paths, and return an

        `INVALID_ARGUMENT` error if any path is duplicated or unmappable.
      properties:
        paths:
          description: The set of field mask paths.
          items:
            type: string
          type: array
      title: '`FieldMask` represents a set of symbolic field paths, for example:'
      type: object
    protobufListValue:
      description: |-
        `ListValue` is a wrapper around a repeated field of values.

        The JSON representation for `ListValue` is JSON array.
      properties:
        values:
          description: Repeated field of dynamically typed values.
          items:
            $ref: '#/components/schemas/protobufValue'
          type: array
      type: object
    protobufNullValue:
      default: NULL_VALUE
      description: >-
        `NullValue` is a singleton enumeration to represent the null value for
        the

        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      enum:
        - NULL_VALUE
      type: string
    protobufStruct:
      description: |-
        `Struct` represents a structured data value, consisting of fields
        which map to dynamically typed values. In some languages, `Struct`
        might be supported by a native representation. For example, in
        scripting languages like JS a struct is represented as an
        object. The details of that representation are described together
        with the proto support for the language.

        The JSON representation for `Struct` is JSON object.
      properties:
        fields:
          additionalProperties:
            $ref: '#/components/schemas/protobufValue'
          description: Unordered map of dynamically typed values.
          type: object
      type: object
    protobufValue:
      description: |-
        `Value` represents a dynamically typed value which can be either
        null, a number, a string, a boolean, a recursive struct value, or a
        list of values. A producer of value is expected to set one of that
        variants, absence of any variant indicates an error.

        The JSON representation for `Value` is JSON value.
      properties:
        bool_value:
          description: Represents a boolean value.
          format: boolean
          type: boolean
        list_value:
          $ref: '#/components/schemas/protobufListValue'
          description: Represents a repeated `Value`.
        null_value:
          $ref: '#/components/schemas/protobufNullValue'
          description: Represents a null value.
        number_value:
          description: Represents a double value.
          format: double
          type: number
        string_value:
          description: Represents a string value.
          type: string
        struct_value:
          $ref: '#/components/schemas/protobufStruct'
          description: Represents a structured value.
      type: object
    runtimeStreamError:
      properties:
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
        grpc_code:
          format: int32
          type: integer
        http_code:
          format: int32
          type: integer
        http_status:
          type: string
        message:
          type: string
      type: object
    shadowPatchDesiredStateResponse:
      type: object
    shadowShadow:
      properties:
        config:
          $ref: '#/components/schemas/shadowVersionedValue'
        desired:
          $ref: '#/components/schemas/shadowVersionedValue'
        reported:
          $ref: '#/components/schemas/shadowVersionedValue'
      type: object
    shadowStreamReportedStateChangesResponse:
      properties:
        reportedDelta:
          $ref: '#/components/schemas/shadowVersionedValue'
      type: object
    shadowVersionedValue:
      properties:
        data:
          $ref: '#/components/schemas/protobufValue'
        timestamp:
          format: date-time
          type: string
        version:
          format: uint64
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
info:
  contact:
    email: joe@infinimesh.io
    name: Infinimesh
    url: 'http://infinimesh.io'
  description: Cloud Native IoT Platform
  title: Infinimesh IoT Platform
  version: 0.0.1
openapi: 3.0.0
paths:
  /account:
    get:
      operationId: SelfAccount
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeAccount'
          description: A successful response.
      tags:
        - Accounts
  /account/token:
    post:
      operationId: Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTokenResponse'
          description: A successful response.
      tags:
        - Accounts
  /accounts:
    get:
      operationId: ListAccounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeListAccountsResponse'
          description: A successful response.
      tags:
        - Accounts
    post:
      operationId: CreateUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeCreateUserAccountRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeCreateUserAccountResponse'
          description: A successful response.
      tags:
        - Accounts
  '/accounts/{account.uid}':
    patch:
      operationId: UpdateAccount
      parameters:
        - in: path
          name: account.uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeAccount'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeAccount'
          description: A successful response.
      tags:
        - Accounts
  '/accounts/{id}':
    get:
      operationId: GetAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeAccount'
          description: A successful response.
      tags:
        - Accounts
  /devices:
    get:
      operationId: List
      parameters:
        - in: query
          name: namespace
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceregistryListResponse'
          description: A successful response.
      tags:
        - Devices
    post:
      operationId: Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceregistryCreateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceregistryCreateResponse'
          description: A successful response.
      tags:
        - Devices
  '/devices/{device.id}':
    patch:
      operationId: Update
      parameters:
        - in: path
          name: device.id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceregistryDevice'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceregistryUpdateResponse'
          description: A successful response.
      tags:
        - Devices
  '/devices/{id}':
    delete:
      operationId: Delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceregistryDeleteResponse'
          description: A successful response.
      tags:
        - Devices
    get:
      operationId: Get
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infinimeshdeviceregistryGetResponse'
          description: A successful response.
      tags:
        - Devices
  '/devices/{id}/state':
    get:
      operationId: Get
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infinimeshshadowGetResponse'
          description: A successful response.
      tags:
        - States
    patch:
      operationId: PatchDesiredState
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/protobufValue'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shadowPatchDesiredStateResponse'
          description: A successful response.
      tags:
        - States
  '/devices/{id}/state/stream':
    get:
      operationId: StreamReportedStateChanges
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: >-
                  #/x-stream-definitions/shadowStreamReportedStateChangesResponse
          description: A successful response.(streaming responses)
      tags:
        - States
  /namespaces:
    get:
      operationId: ListNamespaces
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeListNamespacesResponse'
          description: A successful response.
      tags:
        - Namespaces
    post:
      operationId: CreateNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeCreateNamespaceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeNamespace'
          description: A successful response.
      tags:
        - Namespaces
  '/namespaces/{namespace}':
    get:
      operationId: GetNamespace
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeNamespace'
          description: A successful response.
      tags:
        - Namespaces
  /objects:
    get:
      operationId: ListObjects
      parameters:
        - in: query
          name: namespace
          required: false
          schema:
            type: string
        - in: query
          name: recurse
          required: false
          schema:
            format: boolean
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeListObjectsResponse'
          description: A successful response.
      tags:
        - Objects
    post:
      operationId: CreateObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/infinimeshapiCreateObjectRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeObject'
          description: A successful response.
      tags:
        - Objects
  '/objects/{uid}':
    delete:
      operationId: DeleteObject
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeDeleteObjectResponse'
          description: A successful response.
      tags:
        - Objects
servers:
  - url: 'http://localhost:8081'
  - url: 'https://api.infinimesh.io/'
x-stream-definitions:
  shadowStreamReportedStateChangesResponse:
    properties:
      error:
        $ref: '#/components/schemas/runtimeStreamError'
      result:
        $ref: '#/components/schemas/shadowStreamReportedStateChangesResponse'
    title: Stream result of shadowStreamReportedStateChangesResponse
    type: object
security:
  - bearerAuth: []
